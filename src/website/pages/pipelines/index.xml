<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="pipelines"
         version="5.0">
<info>
  <title>Pipelines</title>
</info>

<para>At the level of this library, you must construct a graph using the
underlying APIs. There’s no “pipeline language” support.
Broadly speaking, there are atomic steps, containers, pipelines (the top-most
container), inputs, outputs, and variable bindings.</para>

<section xml:id="how">
<title>How does it work?</title>

<para>You can construct any graph that you like with these nodes and
edges between them. An edge is a connection between an “output port”
on a “source” node and an “input port” on a “destination” node. The edges
are arbitrary; asserting that an edge exists between two ports creates
the ports if necessary.</para>

<para>There are only a few inviolable constraints on the graph:</para>

<orderedlist>
<listitem><para>Edges can only connect nodes in the same graph.
</para>
</listitem>
<listitem><para>No loops. It’s a
<link xlink:href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</link>.
</para>
</listitem>
<listitem><para>If steps declare required inputs,
those must have edges connected to them.
</para>
</listitem>
</orderedlist>

<para>One of the design flaws in
<link xlink:href="http://github.com/ndw/xmlcalabash1/">XML Calabash 1.x</link>
is that the edges between steps have to buffer what they produce and the sequence
has to be replayable. This happens because multiple steps may read the same output
port and the reads may be interleaved. This problem cannot occur in JAFPL.
Every port is read by exactly one step and exactly one step writes to every
input port. If the graph described by your edges multiplexes access to
any port, a “splitter” or “joiner” step will be inserted as appropriate.</para>

<para>In other words, this graph never happens:</para>

<mediaobject>
<imageobject>
<imagedata fileref="figure0.svg"/>
</imageobject>
</mediaobject>

<para>If you attempt to construct that graph, the library will automatically
restructure it so that this graph is produced:</para>

<mediaobject>
<imageobject>
<imagedata fileref="figure1.svg"/>
</imageobject>
</mediaobject>

<para>You must provide an
<link linkend="api">implementation class</link> for every atomic node that you
construct. That’s the class that will be called upon to perform the
work of the step.</para>

<para>The graph is executed with the <link
xlink:href="http://akka.io/">Akka</link> framework. Actors are created
to manage each node. All steps “start” at the same time and execute in
parallel (to the extent that the graph allows for parallelism, of
course). When the last step reports that it is finished, execution
finishes.</para>

<para>The actors know the topology of the graph. Any step that has no
inputs can run immediately. Steps that have inputs, can’t run until
all of their inputs have been provided. Inputs pass between the steps
as messages. Consider the simple, linear pipeline at the beginning of
this document.</para>

<para>When execution begins, “Do Something” can’t run because
it’s waiting for input from the “outside”. “Do Something Else” can’t
run because it’s waiting for input from “Do Something.” The process
that is running the pipeline pours an arbitrary number of documents
into the input port. Each document is received immediately by “Do
Something”, which is solely responsible for buffering it or doing
whatever is necessary. Eventually, the process running the pipeline
closes the input port.</para>

<para>At this point, the actor framework tells “Do Something” to run.
It does whatever it does, dropping documents into its output port.
The framework turns those documents into messages that are sent
immediately to “Do Something Else.”</para>

<para>When “Do Something” finishes, the framework closes each of its
output ports and consequently the input port that is reading it. When
the last input port on “Do Something Else” is closed, the framework
tells it to run. And thus it continues until every step has run. When
every step has run, the pipeline is finished. The process running the
pipeline can collect its results from the output port(s).</para>

<para>In practice, there are a number of subtleties here. Loops have
to buffer inputs so that they’re available to each iteration. A choose
must make sure that <emphasis>none</emphasis> of the steps in any of its
branches run before a specific branch is selected. Etc.</para>

<para>This library will amend the graph and introduce additional steps as
necessary to hide all of this complexity from the user.</para>

<section xml:id="example">
<title>An example</title>

<para>An example may help. I plan to use this library as the core of
my new XProc implementation, but if you aren’t familiar with XProc
(and odds are, you’re not), that’s not going to be very intuitive.
</para>

<para>To illustrate how things work, a small repository of demonstration
pipelines is provided at
<link xlink:href="https://github.com/ndw/jafpl-demo"/>. One of the larger
examples is the “calc” demo. The calc demo application that uses the
library to evaluate simple arithmetic expressions. Using a pipeline
language for this purpose is a bit crazy, but assuming you understand
how arithmetic works, it demonstrates a features.</para>

<para>Consider the expression “<code>(1+2)*(3+4+5)</code>”. It’s possible to construct
a pipeline to evaluate this expression:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe1.svg"/>
</imageobject>
</mediaobject>

<para>The “Literal” steps are atomic steps that provide numbers. For
convenience, they’re labled “number-<replaceable>n</replaceable>” for
the number “n”. These are simple atomic steps with no inputs and a
single output. When they run, they produce the corresponding number on
their output port.</para>

<para>The expression has been decomposed into a series of binary operations
(3+4+5 = (3+4)+5 because
<link xlink:href="https://en.wikipedia.org/wiki/Associative_property">addition
is associative</link>). The “BinaryOp” steps perform simple binary arithetic
operations: addition, subtraction, multiplication, and division on two inputs.
</para>

<para>There are no external inputs. When this pipeline starts, the
integer literal steps all execute in parallel, producing one output each.
The additions can also proceed in parallel. Then the multiplication computes
the final sum, “36”, which is output and printed by the demo.</para>

<para>To see what happens when inputs are required, consider this
expression: “<code>(1+2)*$foo</code>”. Here <code>$foo</code> is an
additional input to the expression. Steps have inputs and outputs and
(almost) nothing else.</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe2.svg"/>
</imageobject>
</mediaobject>

<para>All atomic steps work basically the same way. There’s also a provision for declaring
a dependency edge between two nodes that aren’t connected by data flow. The semantics
of the dependency are that the <emphasis>dependent</emphasis> step will not be run
before the step it <emphasis>depends on</emphasis> has finished.</para>

<!--
<para>Concocting an example of a compound step requires a little more craziness.
Imagine a function, “double”, that takes a series of numbers as arguments. It doubles
each of its arguments and returns the results as a sequence.</para>

<para>One way to implement this is with a compound step. The compound step takes
the arguments and generates a sequence of numbers from them. Each item in this sequence
is passed through a subpipeline. The result of the step is the output from the subpipeline.
If we stick a single atomic “double” step in the subpipeline, we’ll get the desired
result:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe3.svg"/>
</imageobject>
</mediaobject>

<para>It’s worth noting that even though we conceived of the step as a
wrapper around a subpipeline, the graph implementation is flat. Start
and end steps, which are effectively atomic, are used to manage the iteration.</para>

<para>For one final example, I will use an XProc pipeline. This pipeline is
mostly identity steps. The <tag>p:interleave</tag> step is one that I made
up for testing: it shuffles documents from its <code>left</code> and
<code>right</code> inputs together in strict alternation.</para>

<para>Here is the pipeline:</para>

<programlisting><![CDATA[<p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                name="main" version="1.0">
  <p:input port="source" sequence="true" primary="true"/>
  <p:output port="result" step="end" sequence="true"/>

  <p:identity name="start"/>

  <p:identity name="outside-the-loop"/>

  <p:for-each name="loop">
    <p:iteration-source>
      <p:pipe step="start" port="result"/>
    </p:iteration-source>
    <p:output port="result">
      <p:pipe step="interleave" port="result"/>
    </p:output>

    <p:identity name="first"/>

    <p:interleave name="interleave">
      <p:input port="left">
        <p:pipe step="first" port="result"/>
      </p:input>
      <p:input port="right">
        <p:pipe step="outside-the-loop" port="result"/>
      </p:input>
    </p:interleave>
  </p:for-each>

  <p:identity name="end"/>

</p:declare-step>]]></programlisting>

<para>And here is the somewhat larger graph:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe4.svg"/>
</imageobject>
</mediaobject>


<para>There are two interesting features in this graph:</para>

<orderedlist>
<listitem>
<para>First, an explicit “fan out” step has been added. This is
done automatically by the graph engine. In the execution graph,
every output port will be read by at most one input port and every
input port will consume data from exactly one output port.</para>
</listitem>
<listitem>
<para>The ordinary semantic for atomic steps is that they take inputs,
perform computation, and produce output. Once. If you want to iterate,
you have to make that iteration explicit.</para>
<para>But the <tag>p:interleave</tag> step reads “across” the loop boundary. If it
simply read from the “start” identity step (or the fan out that acts as its
proxy), there would be nothing to read on the second iteration.
The graph engine automatically inserts caching proxies where necessary.
</para>
</listitem>
</orderedlist>
-->
</section>
</section>


</article>
