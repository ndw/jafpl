#+TITLE: Flows

* Initial state

  The initial state of all nodes is STARTED.

  Parents are responsible for keeping track of the state of their children.

* Runtime.run()

  When ~run()~ is called on ~GraphRuntime~, it sends:

  + ~NInit()~ to all top-level-nodes
  + When initialization finishes:
    + ~NStart()~ to all top-level nodes.

* NInit

  + Send ~NInit()~ to all children
  + When initialization finishes
    + Do one-time initialization. Send ~NInitialized()~ or ~NException()~ to runtime.

* NStart

  + Initialize open inputs and outputs.
  + Send ~NReady()~ to parent.
  + If no inputs are open, run

* Running an atomic step

  + Send ~NRunning()~ to parent

  + Begin processing:
    + Send ~NOutput()~ for each document produced.

  + If an exception occurs:
    + Send ~NClose()~ for all outputs
    + Send ~NAborted()~ to parent.

  + Otherwise:
    + Send ~NClose()~ for all outputs
    + Send ~NFinished()~ to parent.

* Running a container

  + Send ~NRunning()~ to parent
  + Send ~NStart()~ to each child
  + Wait until all children finish
    + All have reported finished or aborted
    + All output ports are closed
  + Forward any outputs with ~NOutput()~
  + Forward closes with ~NClose()~

  + If an exception occurs:
    + Send ~NClose()~ for all open outputs
    + Send ~NAborted()~ to parent.

  + Otherwise:
    + Send ~NClose()~ for all outputs
    + Send ~NFinished()~ to parent.

* Running a choose

  + Send ~NRunning()~ to parent
  + Send ~NStart()~ to each child
  + Wait until all children have reported ready.

  + Iterate over the when children:
    + Send ~NCheckGuard()~ and wait for the result
    + If the result is pass:
      + Send ~NRun()~ to the when
      + Send ~NAbort()~ to all remaining whens
    + Otherwise:
      + Send ~NAbort()~ to the when

  + Send ~NOutput()~ for each document produced.

  + If an exception occurs:
    + Send ~NClose()~ for all outputs
    + Send ~NAborted()~ to parent.

  + Otherwise:
    + Send ~NClose()~ for all outputs
    + Send ~NFinished()~ to parent.

* NCheckGuard

  + If the ~test~ input is closed:
    + Evaluate the condition and send ~NCheckResult()~ to parent

* NRun

  Run the container

* NAbort

  + Send ~NClose()~ for all outputs
  + Send ~NAborted()~ to parent

* Running a try/catch

  + Send ~NRunning()~ to parent
  + Send ~NStart()~ to the try
  + Wait until the try reports finished or aborted

  + If the try reported finished
    + Send ~NAbort()~ to all the catches
  + Otherwise:
    + Compute which catch should run:
      + Send ~NStart()~ to that catch
      + Send ~NAbor()~ to all the other catches

  + Send ~NOutput()~ for each document produced.

  + If an exception occurs:
    + Send ~NClose()~ for all outputs
    + Send ~NAborted()~ to parent.

  + Otherwise:
    + Send ~NClose()~ for all outputs
    + Send ~NFinished()~ to parent.
