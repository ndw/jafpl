#+TITLE: Design Notes

Let’s start with an example.

#+begin_src jafpl
jafpl version 0.1;
expressions "xquery";

assert {{
   declare namespace xslt="http://www.w3.org/1999/XSL/Transform";
   $source instance of document-node()
   and $style instance of document-node(element(xsl:stylesheet))
   and $schema instance of document-node()
   and $version instance of xs:decimal?
}}

[ $stylesheet=ref("style"), $source=ref("schema") ]
-> xslt()
-> [ $result=ref("result") ]
-> assert {{ $result instance of document-node() }}

#+end_src

Here’s one with a guarded expression.

#+begin_src jafpl
jafpl version 0.1;
expressions "xquery";

[ $stylesheet=ref("style"), $source=ref("source") ]
-> ( $source/*/@version gt 2.0 )
   { [ref("source"), "schema2.xsd"] -> validate-with-xsd() }
-> ( $source/*/@version le 2.0 )
   { [ref("source"), "schema1.xsd"] -> validate-with-xsd() }
-> [ $result=ref("result") ]
#+end_src

Here’s a JavaScript example.

#+begin_src jafpl
jafpl version 0.1;
expressions "javascript";

[ $geo=ref("geodata"), $loc=ref("loc") ]
-> {{ var found=undefined;
      for (var i=0; i<geo.length; i++) {
        if (loc.id === geo[i].id) {
           found = loc
        }
      }
      if (typeof found !== undefined) {
        xproc.result("result", found)
      }
   }}
#+end_src jafpl

And here’s an example with multiple flows.

#+begin_src jafpl
jafpl version 0.1;
expressions "xquery";

xslt() >> $xsltout

$xsltout -> [ $source=ref("result"), "schema.xsd" ] -> validate() >> $validprimary

$xsltout -> [ source=ref("secondary") ]
         -> iterate { [ref("result"), "schema.xsd"] -> validate() } >> $validsecondary

[ $validprimary, $validsecondary ] -> join()
#+end_src jafpl
