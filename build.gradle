buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath group: 'org.docbook', name: 'docbook-xslt2', version: '2.0.19'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-print', version: '1.1.4'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.1.2'
    classpath group: 'gradle.plugin.com.github.maiflai', name: 'gradle-scalatest', version: '0.14'
  }
}

plugins {
  id "scala"
  id "maven"
  id "de.undercouch.download" version "2.0.0"
  id "com.github.maiflai.scalatest" version "0.14"
}

configurations {
  website
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "http://maven.restlet.org" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
  compile (
    [group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'],
    [group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.4.1'],
    [group: 'com.ibm.icu', name: 'icu4j', version: '49.1'],
    [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'],
    [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'],
    [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'],
    [group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.10'],
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: '0.12.3']
  )
  testCompile (
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion ],
    [group: 'org.scalatest', name: 'scalatest_2.11', version: '3.0.0']
  )
  testRuntime (
    [group: 'org.pegdown', name: 'pegdown', version: '1.6.0']
  )
}

task sourcesJar(dependsOn: classes, type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

// Make IntelliJ stop complaining...
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

apply plugin: 'org.docbook.task'
apply plugin: 'com.xmlcalabash.task'

import org.docbook.DocBookTask
import com.xmlcalabash.XMLCalabashTask
import de.undercouch.gradle.tasks.download.Download

project.ext.docbookXslt = "docbook-xslt2-$docbookXsltVersion"

task downloadDocBook(type: Download) {
  src docbookXsltBaseUri + '/release/' + docbookXsltVersion + '/' + docbookXslt + '.zip'
  dest new File(buildDir, docbookXslt + '.zip')
}
downloadDocBook.onlyIf { !file("$buildDir/${docbookXslt}.zip").exists() }

task setupDocBook(dependsOn: downloadDocBook, type: Copy) {
  from zipTree(downloadDocBook.dest)
  into { "build" }
  doLast {
    copy {
      from "build/$docbookXslt"
      into 'build/docbook'
    }
  }
}
setupDocBook.onlyIf { !file("$buildDir/docbook").exists() }

// All of the hand-authored pages
def pages = [
             'pages/index',
             'pages/contact'
            ]

// Create a task for each page to update it if necessary
pages.each { page ->
  task "$page" (dependsOn: ['menus','gitlog','copyrsrcs','setupDocBook'],
                type: XMLCalabashTask) {
    inputs.file "src/website/${page}.xml"
    inputs.file "srcw/website/etc/menu.xml"
    inputs.file "src/website/style/webpage.xpl"
    inputs.file "src/website/style/webpage.xsl"
    outputs.file "build/menus/PLACEHOLDER.html"
    outputs.file "build/${page}.html"

    input("source", "src/website/${page}.xml")
    output("result", "build/${page}.html")
    pipeline "src/website/style/webpage.xpl"
  }
}

// The task that updates all of the page headers
task menus(type: XMLCalabashTask) {
  inputs.file "src/website/etc/menu.xml"
  inputs.file "src/website/style/menus.xsl"
  inputs.file "src/website/style/menus.xpl"
  outputs.file "build/menus/PLACEHOLDER.html"

  input("source", "src/website/etc/menu.xml")
  output("result", "build/menus/PLACEHOLDER.html")
  pipeline "src/website/style/menus.xpl"
}

task builddirs {
  doFirst {
    mkdir("build")
    mkdir("build/pages")
    mkdir("build/pages/css")
    mkdir("build/pages/images")
    mkdir("build/pages/graphics")
  }
}

// Copy a bunch of files
task copyrsrcs(dependsOn: ['copycss','copyimages','copygraphics','copypages']) {
  // nop
}

task copycss(dependsOn: builddirs, type: Copy) {
  from 'src/website/css'
  into 'build/pages/css'
}

task copyimages(dependsOn: builddirs, type: Copy) {
  from 'src/website/images'
  into 'build/pages/images'
}

task copygraphics(dependsOn: builddirs, type: Copy) {
  from 'src/website/graphics'
  into 'build/pages/graphics'
}

task copypages(dependsOn: builddirs, type: Copy) {
  from 'src/website/pages'
  into 'build/pages'
}

// Get the current git log in XML
// N.B. The output should go to build/etc but I *cannot* work out how
// to get Gradle to do that. If the directory doesn't exist, it fails.
// It fails before it even runs dependencies that would create the
// directory!?
task gitlog(dependsOn: builddirs, type: Exec) {
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    commandLine "cmd", "/c", "perl", "src/website/bin/git-log-summary"
  } else {
    commandLine "src/website/bin/git-log-summary"
  }
  standardOutput = new FileOutputStream(new File("src/website/etc/git-log-summary.xml"))
}

// The default task. It just depends on all the necessary pages
task website(dependsOn: [pages]) {
  // nop
}

// Make the default build target also build the website
build.dependsOn website
