<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="home"
         version="5.0">
<info>
  <title>JAFPL.com</title>
</info>

<para>This project is the core runtime for a general purpose pipeline
processor. It’s the heart of <citetitle>XML Calabash V2.x</citetitle>,
but there is <emphasis>nothing</emphasis> XML-centric about the pipeline
processor.</para>

<para><citetitle>XML Calabash V2.x</citetitle> hasn’t been released
yet. This processor hasn’t been released in any official sense either.
YMMV. Here there be dragons. Etc.</para>

<section xml:id="what">
<title>What is it?</title>

<para>This is a JVM library for evaluating pipelines composed of
arbitrary steps.</para>

<para>For the purpose of this discussion, a pipeline is a directed,
acyclic graph. Each node in the graph represents some kind of
processing. The edges between the nodes are how the data flows through
the pipeline.</para>

<mediaobject>
<imageobject>
<imagedata fileref="byhand-1.svg"/>
</imageobject>
</mediaobject>

<para>This library doesn’t care what each node does and it
doesn’t care what kind of data flows between nodes. You construct a
graph with edges. You pour data in at the top, stuff happens, data
pours out the bottom.</para>

<para>Each node is a “<code>step</code>”. Steps are where “stuff happens”.
Many steps can be implemented as atomic units of work
(henceforth “atomic steps”), but some naturally operate on subgraphs,
these are “containers”. The following containers are supported:</para>

<variablelist>
<varlistentry><term>Groups</term>
<listitem>
<simpara>A group is a lexical container, it has no additional semantics.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Iteration</term>
<listitem>
<simpara>Several flavors of iteration are supported: iteration over a sequence,
iteration while a condition is true, and iteration to a fixed point.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Viewports</term>
<listitem>
<simpara>A viewport operates on subsections of its input. For example, on
specified keys in a JSON object or on specified descendants in an XML document.
But equally, it could operate on regions of an image or lines of a text file.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Conditionals</term>
<listitem>
<simpara>A conditional selects one of a set of possible subpipelines, based on
a user-specified condition.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Try/catch error handling</term>
<listitem>
<simpara>Step implementations may encounter errors and raise exceptions.
A try/catch block gives the pipeline author an opportunity to catch those
errors and react accordingly.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term></term>
<listitem>
<simpara>
</simpara>
</listitem>
</varlistentry>
</variablelist>

<para>It would be nice to generalize the abstraction of “container” to the
point where a small number of primitives in the core library could be used to
build arbitrary containers. So far, that goal seems elusive.</para>
</section>

<section xml:id="where">
<title>Where is it?</title>

<para><inlinemediaobject><imageobject><imagedata fileref="https://travis-ci.org/ndw/jafpl.svg?branch=master"/></imageobject></inlinemediaobject></para>

<para>It’s <link xlink:href="https://github.com/ndw/jafpl">on GitHub</link>.
</para>
</section>


<section xml:id="whatsnext">
<title>What’s next?</title>

<para>Continued development. Work on <citetitle>XML Calabash V2.x</citetitle>,
of course. But I’m interested in other pipeline applications, if you’ve got
one.</para>
</section>

<section xml:id="whatif">
<title>What if I want a …?</title>

<para>Just <link xlink:href="https://github.com/ndw/jafpl/issues">file an issue</link>,
man, that’s all I got.</para>

</section>

</article>
