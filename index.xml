<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="home"
         version="5.0">
<info>
  <title>JAFPL.com</title>
</info>

<para>This project is the core runtime for a general purpose pipeline
processor. It’s the heart of <citetitle>XML Calabash V2.x</citetitle>
which hasn’t been released yet. This hasn’t been released in any
official sense either. YMMV. Here there be dragons. Etc.</para>

<section xml:id="what">
<title>What is it?</title>

<para>This is a JVM library for evaluating pipelines composed of
arbitrary steps.</para>

<para>For the purpose of this discussion, a pipeline is a directed,
acyclic graph. Each node in the graph represents some kind of
processing. The edges between the nodes are how the data flows through
the pipeline.</para>

<mediaobject>
<imageobject>
<imagedata fileref="byhand-1.svg"/>
</imageobject>
</mediaobject>

<para>This library doesn’t care what each node does and it
doesn’t care what kind of data flows between nodes. You construct a
graph with edges. You pour data in at the top, stuff happens, data
pours out the bottom.</para>

<para>Many nodes can be implemented as atomic units of work
(henceforth “atomic steps”), but some naturally operate on subgraphs
(henceforth “compound steps”). Several compound steps are planned:</para>

<orderedlist>
<listitem><simpara>Iteration. (Iterate over a sequence, iterate until done,
iterate until stable.)</simpara>
</listitem>
<listitem><simpara>Choose one of several alternatives.</simpara>
</listitem>
<listitem><simpara>Try/catch style error handling.</simpara>
</listitem>
</orderedlist>

<para>It would be nice to generalize the abstraction of “compound step” to the
point where a small number of primitives in the core library could be used to
build arbitrary compound steps. So far, that goal seems elusive. Each of the
types that I’ve implemented have had quite different expressions at the graph
level.</para>

</section>

<section xml:id="where">
<title>Where is it?</title>

<para><inlinemediaobject><imageobject><imagedata fileref="https://travis-ci.org/ndw/jafpl.svg?branch=master"/></imageobject></inlinemediaobject></para>

<para>It’s <link xlink:href="https://github.com/ndw/jafpl">on GitHub</link>.
</para>
</section>

<section xml:id="how">
<title>How does it work?</title>

<para>At the level of this library, you must construct a graph using the
underlying APIs. There’s no “pipeline language” support at this level.
Broadly speaking, there are four kinds of nodes:</para>

<itemizedlist>
<listitem><para><classname>Node</classname>s are the general case, they
are atomic steps in the pipeline.</para>
</listitem>
<listitem><para><classname>InputNode</classname>s represent an “input boundary”
between the graph and the outside world. This is where you pour documents
into the pipeline.
</para>
</listitem>
<listitem><para><classname>OutputNode</classname>s represent an “output boundary”.
This is where you pull the results out of the pipeline.
</para>
</listitem>
<listitem><para>Compound steps are actually represented as two atomic
nodes, a “start node” and an “end node”. I’m not entirely pleased with
the current API for compound steps so let’s just set those aside for
the moment.
</para>
</listitem>
</itemizedlist>

<para>You can construct any graph that you like with these nodes and
edges between them. An edge is a connection between an “output port”
on a “source” node and an “input port” on a “destination” node. The edges
are arbitrary; asserting that an edge exists between two ports creates
the ports if necessary.</para>

<para>There are only a few inviolable constraints on the graph:</para>

<orderedlist>
<listitem><para>No loops. It’s a
<link xlink:href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAG</link>.
</para>
</listitem>
<listitem><para>You can’t use an <classname>InputNode</classname> as the destination
of any edge.</para>
</listitem>
<listitem><para>You can’t use an <classname>OutputNode</classname> as the source
of any edge.</para>
</listitem>
</orderedlist>

<para>One of the design flaws in
<link xlink:href="http://github.com/ndw/xmlcalabash1/">XML Calabash 1.x</link>
is that the edges between steps have to buffer what they produce and the sequence
has to be replayable. This happens because multiple steps may read the same output
port and the reads may be interleaved. This problem cannot occur in JAFPL.
Every port is read by exactly one step and exactly one step writes to every
input port. If the graph described by your edges multiplexes access to
any port, a “fan in” or “fan out” step will be inserted as appropriate.</para>

<para>In other words, this graph never happens:</para>

<mediaobject>
<imageobject>
<imagedata fileref="byhand-2.svg"/>
</imageobject>
</mediaobject>

<para>If you attempt to construct that graph, the library will automatically
restructure it so that this graph is produced:</para>

<mediaobject>
<imageobject>
<imagedata fileref="byhand-3.svg"/>
</imageobject>
</mediaobject>

<para>You must provide an
<link linkend="api">implementation class</link> for every node that you
construct. That’s the class that will be called upon to perform the
work of the step.</para>

<para>The graph is executed with the <link
xlink:href="http://akka.io/">Akka</link> framework. Actors are created
to manage each node. All steps “start” at the same time and execute in
parallel (to the extent that the graph allows for parallelism, of
course). When the last step reports that it is finished, execution
finishes.</para>

<para>The actors know the topology of the graph. Any step that has no
inputs can run immediately. Steps that have inputs, can’t run until
all of their inputs have been provided. Inputs pass between the steps
as messages. Consider the simple, linear pipeline at the beginning of
this document.</para>

<para>When execution begins, “Do Something” can’t run because
it’s waiting for input from the “outside”. “Do Something Else” can’t
run because it’s waiting for input from “Do Something.” The process
that is running the pipeline pours an arbitrary number of documents
into the input port. Each document is received immediately by “Do
Something”, which is solely responsible for buffering it or doing
whatever is necessary. Eventually, the process running the pipeline
closes the input port.</para>

<para>At this point, the actor framework tells “Do Something” to run.
It does whatever it does, dropping documents into its output port.
The framework turns those documents into messages that are sent
immediately to “Do Something Else.”</para>

<para>When “Do Something” finishes, the framework closes each of its
output ports and consequently the input port that is reading it. When
the last input port on “Do Something Else” is closed, the framework
tells it to run. And thus it continues until every step has run. When
every step has run, the pipeline is finished. The process running the
pipeline can collect its results from the output port.</para>

<para>In practice, there are a number of subtlties here. Loops have
to buffer inputs so that they’re available to each iteration. A choose
must make sure that <emphasis>none</emphasis> of the steps in any of its
branches run before a specific branch is selected. Etc.</para>

<para>This library will amend the graph and introduce additional steps as
necessary to hide all of this complexity from the user.</para>

<section xml:id="example">
<title>An example</title>

<para>An example may help. I plan to use this library as the core of
my new XProc implementation, but if you aren’t familiar with XProc
(and odds are, you’re not), that’s not going to be very intuitive.
</para>

<para>To illustrate how things work, the library ships with a small
<citetitle>CalcDemo</citetitle> application that uses the library to
evaluate simple arithmetic expressions. Using a pipeline language for
this purpose is a bit crazy, but I’m going to assume you all
understand how arithmetic works.</para>

<para>Consider the expression “<code>(1+2)*(3+4+5)</code>”. It’s possible to construct
a pipeline to evaluate this expression:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe1.svg"/>
</imageobject>
</mediaobject>

<para>The steps labled
<literal>IntegerLiteral_<replaceable>number</replaceable></literal>”
are atomic steps that provide the input numbers. (It’s a shame they aren’t
labeled 1, 2, 3, 4, 5, corresponding to the input digits, but the numbers
are actually a function of the way the expression is parsed. However,
that’s not important, they’re just labels.)
The steps labeled
“<literal>AdditiveExpr_<replaceable>number</replaceable></literal>” and
“<literal>MultiplicativeExpr_<replaceable>number</replaceable></literal>”
perform the obvious mathematical operations on their inputs.</para>

<para>There are no external inputs. When this pipeline starts, the
integer literal steps all execute in parallel, producing one output each.
The additions can also proceed in parallel. Then the multiplication computes
the final sum, “36”, which is printed by the demo.</para>

<para>To see what happens when inputs are required, consider this
expression: “<code>(1+2)*$foo</code>”. Here <code>$foo</code> is an
additional input to the expression. Steps have inputs and outputs and
(almost) nothing else.</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe2.svg"/>
</imageobject>
</mediaobject>

<para>All atomic steps work basically the same way. There’s also a provision for declaring
a dependency edge between two nodes that aren’t connected by data flow. The semantics
of the dependency are that the <emphasis>dependent</emphasis> step will not be run
before the step it <emphasis>depends on</emphasis> has finished.</para>

<para>Concocting an example of a compound step requires a little more craziness.
Imagine a function, “double”, that takes a series of numbers as arguments. It doubles
each of its arguments and returns the results as a sequence.</para>

<para>One way to implement this is with a compound step. The compound step takes
the arguments and generates a sequence of numbers from them. Each item in this sequence
is passed through a subpipeline. The result of the step is the output from the subpipeline.
If we stick a single atomic “double” step in the subpipeline, we’ll get the desired
result:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe3.svg"/>
</imageobject>
</mediaobject>

<para>It’s worth noting that even though we conceived of the step as a
wrapper around a subpipeline, the graph implementation is flat. Start
and end steps, which are effectively atomic, are used to manage the iteration.</para>

<para>For one final example, I will use an XProc pipeline. This pipeline is
mostly identity steps. The <tag>p:interleave</tag> step is one that I made
up for testing: it shuffles documents from its <code>left</code> and
<code>right</code> inputs together in strict alternation.</para>

<para>Here is the pipeline:</para>

<programlisting><![CDATA[<p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                name="main" version="1.0">
  <p:input port="source" sequence="true" primary="true"/>
  <p:output port="result" step="end" sequence="true"/>

  <p:identity name="start"/>

  <p:identity name="outside-the-loop"/>

  <p:for-each name="loop">
    <p:iteration-source>
      <p:pipe step="start" port="result"/>
    </p:iteration-source>
    <p:output port="result">
      <p:pipe step="interleave" port="result"/>
    </p:output>

    <p:identity name="first"/>

    <p:interleave name="interleave">
      <p:input port="left">
        <p:pipe step="first" port="result"/>
      </p:input>
      <p:input port="right">
        <p:pipe step="outside-the-loop" port="result"/>
      </p:input>
    </p:interleave>
  </p:for-each>

  <p:identity name="end"/>

</p:declare-step>]]></programlisting>

<para>And here is the somewhat larger graph:</para>

<mediaobject>
<imageobject>
<imagedata fileref="pipe4.svg"/>
</imageobject>
</mediaobject>


<para>There are two interesting features in this graph:</para>

<orderedlist>
<listitem>
<para>First, an explicit “fan out” step has been added. This is
done automatically by the graph engine. In the execution graph,
every output port will be read by at most one input port and every
input port will consume data from exactly one output port.</para>
</listitem>
<listitem>
<para>The ordinary semantic for atomic steps is that they take inputs,
perform computation, and produce output. Once. If you want to iterate,
you have to make that iteration explicit.</para>
<para>But the <tag>p:interleave</tag> step reads “across” the loop boundary. If it
simply read from the “start” identity step (or the fan out that acts as its
proxy), there would be nothing to read on the second iteration.
The graph engine automatically inserts caching proxies where necessary.
</para>
</listitem>
</orderedlist>
</section>
</section>

<section xml:id="api">
<title>Step API</title>

<para>One of my goals is to conceal as much of the underlying framework
as possible from step implementors. Atomic steps are only required to implement
a simple API; nothing about the framework is exposed. Compound steps are
a little trickier; it may not be possible to completely conceal the framework
from implementors of compound steps.</para>

<para>The API for atomic steps is quite straigthforward. Each (atomic)
step implmentation must implement five methods:</para>

<section xml:id="setup">
<title>Setup</title>
<programlisting><![CDATA[def setup(controller: StepController,
          inputPorts: List[String],
          outputPorts: List[String])]]></programlisting>

<para>Setup will be called once before execution begins. The graph
constructor neither knows nor cares about the name and number of
inputs and outputs on each node. Setup is the implementation’s
opportunity to look at the configuration and decide if it’s ok.</para>

<para>All of the inputs to a step (it’s “document” inputs as
well as any options that it accepts) arrive the same way. The names
used during graph construction will be the names presented here. For
my XProc implementation, incoming options are identified with QNames
names in “Clark” format.</para>

<para>The implementation should keep a copy of the controller. The
controller is how the step sends data “downstream” to the next step(s)
in the graph. For atomic steps, there’s only one important method on
the controller:</para>

<programlisting><![CDATA[def send(port: String, item: GenericItem)]]></programlisting>

<para>This method sends the item “out” of specified port. The graph handles
delivery to the other step or steps (if any) that read from that port.</para>
</section>

<section xml:id="receive">
<title>Receive</title>
<programlisting><![CDATA[def receive(port: String, msg: ItemMessage)]]></programlisting>

<para>Receive is how data gets delievered to the step. The actor responsible
for managing the node will call the <methodname>receive</methodname> method each
time a document arrives. The names of the ports will always match the names
provided in the <methodname>setup</methodname> method.</para>
</section>

<section xml:id="run">
<title>Run</title>
<programlisting><![CDATA[def run()]]></programlisting>

<para>After all of the inputs have been delivered, the step will be
asked to run. This will happen <emphasis>at most</emphasis> once. Any inputs that have not
yet been received when <methodname>run</methodname> is called, have
not been provided.
</para>

<para>There’s no requirement that an implementation wait until
<methodname>run</methodname> is called. The identity step, for
example, can send the documents out as fast as they arrive and do
nothing when <methodname>run</methodname> is called.</para>

<para>But if a step needs all its inputs before it can run, that’s fine too,
but it is responsible for buffering them.</para>

<para>When <code>run</code> returns, all of the step’s output ports
will be closed automatically.</para>
</section>

<section xml:id="reset">
<title>Reset</title>
<programlisting><![CDATA[def reset()]]></programlisting>

<para>If the step is in a loop, it will be reset between each iteration.
Steps should not maintain any state across <methodname>reset</methodname> calls:
flush all cached inputs, return all settings to the defaults that existed
before <methodname>run</methodname> was called, etc.
</para>

<para>If a step is in a conditional block, it may be reset several times in
a row without intervening runs.</para>

<para>A step cannot tell if it will be reset again before it runs, however,
it can tell if it will run before it is reset again. If any inputs arrive,
(are <methodname>receive</methodname>d), then the step will be run.</para>

</section>

<section xml:id="teardown">
<title>Teardown</title>
<programlisting><![CDATA[def teardown()]]></programlisting>

<para>Teardown is called once when the pipeline execution has finished.</para>

</section>

<section xml:id="compound">
<title>What about compound step?</title>

<para>They’re a little bit more complicated. I’m still trying to work out
what’s going to work best.</para>
</section>
</section>

<section xml:id="whatsnext">
<title>What’s next?</title>

<para>Well. Continued development, I hope. But no promises.</para>
</section>

<section xml:id="whatif">
<title>What if I want a …?</title>

<para>Just <link xlink:href="https://github.com/ndw/jafpl/issues">file an issue</link>,
man, that’s all I got.</para>

</section>

</article>
