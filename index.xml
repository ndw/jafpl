<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="home"
         version="5.0">
<info>
  <title>JAFPL.com</title>
</info>

<para>This project is in an early, alpha state.
YMMV. Here there be dragons. Etc.</para>

<section xml:id="how">
<title>Getting started</title>

<para>If you’re new to JAFPL, begin by reading the overview on this page.
then read about <link xlink:href="/pipelines/">pipelines</link>. To become
familiar with the APIs provided by this project, read the
<link xlink:href="/apis/">APIs</link> pages.</para>

<para>If you find errors in this documentation, or if you think there
are parts that are unclear or simply missing, please
<link xlink:href="https://github.com/ndw/jafpl/issues">file an issue</link>
to let us know.</para>

</section>

<section xml:id="what">
<title>What is it?</title>

<para>This project is a JVM library for evaluating arbitrary data flow
graphs or “pipelines”. The nodes, or “steps”, in the graph are
operations. The edges are how data flows between steps. A step
takes its inputs, performs some arbitrary computation, and produces
its outputs.</para>

<para>A simple, two step pipeline might be visualized with boxes and
arrows.</para>

<mediaobject>
<imageobject>
<imagedata fileref="byhand-1.svg"/>
</imageobject>
</mediaobject>

<para>This library doesn’t care what each step does and it
doesn’t care what kind of data flows between steps. You construct a
graph with edges. You pour data in at the top, stuff happens, data
pours out the bottom.</para>

<para>Many steps are atomic in nature, they are “black boxes” of
computation, but some naturally operate on subgraphs, these are
“containers”. The following containers are supported:</para>

<variablelist>
<varlistentry><term>Groups</term>
<listitem>
<simpara>A group is the simplest possible container. It’s vacuous,
providing no additional semantics.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Iteration</term>
<listitem>
<simpara>Several flavors of iteration container are supported:
iteration over a sequence, iteration while a condition is true,
iteration to a fixed point, and iteration a specific number of times.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Viewports</term>
<listitem>
<simpara>A viewport operates on subsections of its input, for example,
on the values of specific keys in a JSON object or on specified
descendants in an XML document. But equally, it could operate on
regions of an image or lines of a text file.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Conditionals</term>
<listitem>
<simpara>A conditional selects one of a set of possible subpipelines,
based on a condition evaluated at runtime.
</simpara>
</listitem>
</varlistentry>
<varlistentry><term>Try/catch/finally error handling</term>
<listitem>
<simpara>Step implementations may encounter errors and raise
exceptions. A try/catch container gives the pipeline author an
opportunity to catch those errors and react accordingly.
</simpara>
</listitem>
</varlistentry>
<!--
<varlistentry><term></term>
<listitem>
<simpara>
</simpara>
</listitem>
</varlistentry>
-->
</variablelist>

<para>It would be nice to generalize the abstraction of “container” to the
point where a small number of primitives in the core library could be used to
build arbitrary containers. So far, that goal seems elusive.</para>
</section>

<section xml:id="where">
<title>Where is it?</title>

<para>It’s <link xlink:href="https://github.com/ndw/jafpl">on GitHub</link>.
</para>

<para><inlinemediaobject><imageobject><imagedata fileref="https://travis-ci.org/ndw/jafpl.svg?branch=master"/></imageobject></inlinemediaobject></para>

</section>

<section xml:id="whatsnext">
<title>What’s next?</title>

<para>Continued development. If you have pipeline applications, I’d like to hear
about them.</para>
</section>

<section xml:id="whatif">
<title>What if I want a …?</title>

<para>Just <link xlink:href="https://github.com/ndw/jafpl/issues">file an issue</link>,
man, that’s all I got.</para>

</section>

</article>
