<article xmlns="http://docbook.org/ns/docbook"
	 xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
	 xml:id="vocabulary"
         version="5.0">
<info>
  <title>Step Vocabulary</title>
</info>

<para>The vocabulary of atomic steps is effectively unbounded; anything that
implements
<link xlink:href="steps">the step API</link> can be used as an atomic step.
The vocabulary of compound steps, or containers, is limited to what the current
version of JAFPL provides.</para>

<section xml:id="pipeline">
<title>The pipeline</title>

<para>The <code>pipeline</code> is the top-most object in your graph.
You can bind an arbitrary number of external inputs, outputs, and
options to it.</para>

</section>
<section xml:id="group">
<title>group</title>

<para>A <code>group</code> is simply a container. It has no special
semantics.</para>

</section>
<section xml:id="choose">
<title>choose/when</title>

<para>The <code>choose</code> object takes one or more
<code>when</code> objects. Each <code>when</code> object has a guard
condition, “test”. When the <code>choose</code> runs, each
<code>when</code>’s test is evaluated in turn (in the order that they
were added to the choose). The first <code>when</code> for which the
effective boolean value of the test is “true” is run. No other
<code>when</code> runs. It is an error if no <code>when</code>
matches, so make sure you put a “true” condition at the end.</para>

</section>
<section xml:id="try">
<title>try/catch/finally</title>

<para>The <code>try-catch</code> object takes a <code>try</code>
object, zero or more <code>catch</code> objects, and, optionally,
a <code>finally</code> object. Evaluation of the <code>try</code> is
attempted. If that fails, its output is discarded and one of the
<code>catch</code> branches is selected and run. In either case, the
<code>finally</code> runs after the try/catch is otherwise finished.</para>

</section>
<section xml:id="for-each">
<title>For-each loop</title>

<para>A <code>for-each</code> loop iterates over a sequence of inputs,
applying processing to each one.</para>

</section>
<section xml:id="for">
<title>For loop</title>

<para>A <code>for</code> loop iterates a fixed number of times. (You
specify the start, which defaults to 1, the limit, and the increment,
which also defaults to 1).</para>

</section>
<section xml:id="while">
<title>while loop</title>

<para>A <code>while</code> loop takes a single input and a tester.
If testing the input returns true, the loop is evaluated. The tested
input appears on the “current” port of the loop. The
body of the loop must write exactly one result to the “test” output
port of the loop. When the loop finishes, the result written to “test”
is tested again. Iteration continues until the test returns false.</para>

</section>
<section xml:id="until">
<title>until loop</title>

<para>An <code>until</code> loop takes a single input and a comparator.
The body of the loop is evaluated once using the input as the
“current” input. The body of the loop must write exactly one
result to the “test” output port of the loop. When the loop finishes,
the comparator is passed the original input and the result.
If it returns true, the process begins again with the result as the new input.
</para>

</section>
<section xml:id="viewport">
<title>viewport</title>

<para>A <code>viewport</code> decomposes an input into a series of
fragments. How the fragment are constructed is determined by the
implementation. Each fragment is processed by the pipeline that the
viewport contains. The resulting collection of fragments (both the ones
selected for processing and the ones not selected) are stitched back together
to produce the result.</para>

</section>
</article>
